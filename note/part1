part 1 :  Machine Learning

##split the numeric and categorical variables
num_columns = []
cate_columns = []
for column in test.columns:
    if train.dtypes[column] != 'object':
        num_columns.append(column)
    else:
        cate_columns.append(column)

#a easier method
cat_train=train.select_dtypes(['object'])
num_train=train.select_dtypes(exclude=['object'])


##evaluate the accuracy of  ragression model
from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
from sklearn.metrics import mean_squared_log_error

##split train set and test set
from sklearn.model_selection import train_test_split
train_X,test_X,train_y,test_y=train_test_split(X,y)  #train_size (default:0.75f),random_state

##estimate the mean absolute error of DecisionTree with different max nodes
def get_mae(max_nodes,train_X,train_y,test_X,test_y):
    model=DecisionTreeRegressor(max_nodes=max_nodes,random_state=0)
    model.fit(train_X,train_y)
    pre=model.predict(test_X)
    mae=mean_absolute_error(pre,test_y)
    return mae

##random forset model
from sklearn.ensemble import RandomForestRegressor

##deal with missing data
1.delete col with nan in this col  (which is not a good solution to deal with missing data)
nan_col=[col for col in train.columns if train[col].isnull().any()]
reduced_date=train.drop(nan_col,axis=1)

2.a better way
from sklearn.preprocessing import Imputer
my_imputer=Imputer()
data_with_imputed_values=my_imputer.fit_transform(train)
we can change the fill method by change the para strategy,its default value is 'mean'.the optinal value contain 'median','most_frequent'

3.get score from impution with extra columns showing what wad imputed
miss_col=[col for col in train.columns if train[col].isnull().any()]
for col in miss_col:
train[col+"_miss"]=train[col].isnull()
my_imputer=Imputer()
train=my_imputer.fit_transform(train)
